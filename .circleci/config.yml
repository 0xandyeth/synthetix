version: 2.1
commands:
  cmd-fork-start:
    # Starts a forked local chain
    description: Starts a local ganache fork on the specified network
    parameters:
      network:
        type: string
      reset:
        type: boolean
        default: false
    steps:
      - run:
          command: node publish fork --network << parameters.network >> <<# parameters.reset >> --reset <</ parameters.reset >> --unlock-accounts 0xbe0eb53f46cd790cd13851d5eff43d12404d33e8
          background: true
      - cmd-wait-for-rpc
  cmd-local-start:
    # Starts a local chain
    description: Starts a local ganache chain
    steps:
      - run:
          command: npx buidler node
          background: true
      - cmd-wait-for-rpc
  cmd-wait-for-rpc:
    # Wait until a connection is established with http://localhost:8545
    steps:
      - run: sleep 5
      - run:
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=120 --timeout=120 -t 100 http://localhost:8545
            :
jobs:
  job-compile:
    # Compiles all contracts and fails with oversized contracts
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npx buidler compile --optimizer --fail-oversize
      - run: npx buidler compile --use-ovm --optimizer --fail-oversize
  job-diff-prod-tests-local-ovm:
    # Simulates a deployment of an ovm configuration in a local chain, and runs production tests against it
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Compile
      - run: node publish build
      # Start local chain
      - cmd-local-start
      # Deploy
      - run: node publish deploy --network local --fresh-deploy --yes --use-ovm --ignore-safety-checks --ignore-custom-parameters --deployment-path ./publish/deployed/local-ovm
      # Run production tests
      - run: npm run test:prod -- --use-ovm --patch-fresh-deployment --deployment-path ./publish/deployed/local-ovm
  job-diff-prod-tests-local:
    # Simulates a deployment in a local chain, and runs production tests against it
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Compile
      - run: node publish build
      # Start local chain
      - cmd-local-start
      # Deploy
      - run: node publish deploy --network local --fresh-deploy --yes
      # Run production tests
      - run: npm run test:prod -- --patch-fresh-deployment
  job-diff-prod-tests:
    # Simulates a deployment in a fork, and runs production tests against it
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    parameters:
      network:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Compile
      - run: node publish build
      # Start fork
      - cmd-fork-start:
          network: << parameters.network >>
          reset: true
      # Prepare deploy
      - run: node publish prepare-deploy --network << parameters.network >>
      # Deploy
      - run: node publish deploy --add-new-synths --use-fork --yes --network << parameters.network >>
      # Run production tests
      - run: npm run test:prod:gas -- --patch-fresh-deployment && npx codechecks codechecks.prod.yml
      - store_artifacts:
          path: test-gas-used-prod.log
  job-lint:
    # Runs all linters
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run lint
  job-pack-browser:
    # Packs js code for browser usage
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run pack
      - store_artifacts:
          path: browser.js
  job-prepare:
    # Bootstraps dependencies
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'v2-dependencies-'
      - run: npm install
      - save_cache:
          key: 'v2-dependencies-'
          paths:
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
  job-prod-tests:
    # Restarts a forked chain, and runs production tests with gas reports against it
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    parameters:
      network:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - cmd-fork-start:
          network: << parameters.network >>
      - run: npm run test:prod:gas && npx codechecks codechecks.prod.yml
      - store_artifacts:
          path: test-gas-used-prod.log
  job-static-analysis:
    # Runs all static analysis checks
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Show Slither output
          # ignore slither error codes
          command: |
            set +e
            slither .
            exit 0
  job-test-deploy-script:
    # Validates that the deploy command is working as expected
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Test and output logs
          command: |
            set +e
            npm run test:publish
            EXIT_CODE=$?
            if [ $EXIT_CODE -gt 0 ]; then
              tail -n 2000 test/publish/test.log; # show tail of logs here if test failed
            fi
            npx ansi-to-html --newline --bg black test/publish/test.log > test/publish/test-log.html
            exit $EXIT_CODE
      - store_artifacts:
          path: test/publish/test-log.html
          destination: test-log.html
  job-test-ovm-bridge:
    # Tests the ovm bridge in a same chain environment
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run test:multi-same-chain
  job-unit-tests-coverage:
    # Measures unit and spec test coverage
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: NODE_OPTIONS=--max_old_space_size=4096 npm run coverage
      - run: bash <(curl -s https://codecov.io/bash)
  job-unit-tests-gas-report:
    # Measures deployment and transaction gas usage in unit tests
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run test:gas && npx codechecks codechecks.unit.yml
      - store_artifacts:
          path: test-gas-used.log
  job-unit-tests-legacy:
    # Runs unit tests against legacy contracts
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run compile:legacy
      - run: npx buidler test:legacy
  job-unit-tests-ovm:
    # Compiles for ovm and runs unit tests in a local ovm chain
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          command: |
            npx buidler compile --use-ovm --optimizer
  job-unit-tests:
    # Runs all unit and spec tests
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npx buidler compile --showsize --optimizer
      - run:
          name: Test and output gas used
          command: |
            set +e
            npm test
            EXIT_CODE=$?
            cat test-gas-used.log
            printf "\\n"
            exit $EXIT_CODE
  job-validate-deployments:
    # Validates deployment json data against on-chain data
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run test:deployments
  job-validate-etherscan:
    # Validates that sources have been verified in etherscan
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.18
    parameters:
      network:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: npm run test:etherscan --  --network << parameters.network >>
workflows:
  workflow-any:
    jobs:
      - job-prepare
      - job-lint:
          requires:
            - job-prepare
      - job-compile:
          requires:
            - job-prepare
      - job-static-analysis:
          requires:
            - job-prepare
  workflow-develop:
    jobs:
      - job-prepare:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
      - job-unit-tests:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
      - job-unit-tests-coverage:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
      - job-unit-tests-gas-report:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
      - job-unit-tests-legacy:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
      - job-test-deploy-script:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
      - job-test-ovm-bridge:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
      - job-unit-tests-ovm:
          filters:
            branches:
              only: /.*(develop|staging|master).*/
          requires:
            - job-prepare
  workflow-master:
    jobs:
      - job-prepare:
          filters:
            branches:
              only: /.*(master).*/
      # ~~~~~~~~~~~~ Etherscan validation on MAINNET ~~~~~~~~~~~~~
      - job-validate-etherscan:
          name: job-validate-etherscan-mainnet
          network: mainnet
          filters:
            branches:
              only: /.*(master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~ Etherscan validation on RINKEBY ~~~~~~~~~~~~~
      - job-validate-etherscan:
          name: job-validate-etherscan-rinkeby
          network: rinkeby
          filters:
            branches:
              only: /.*(master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~ Etherscan validation on KOVAN ~~~~~~~~~~~~~
      - job-validate-etherscan:
          name: job-validate-etherscan-kovan
          network: kovan
          filters:
            branches:
              only: /.*(master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~ Etherscan validation on ROPSTEN ~~~~~~~~~~~~~
      - job-validate-etherscan:
          name: job-validate-etherscan-ropsten
          network: ropsten
          filters:
            branches:
              only: /.*(master).*/
          requires:
            - job-prepare
  workflow-scheduled:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Deployment validation
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-validate-deployments:
          requires:
            - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Production tests
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-prod-tests:
          name: job-prod-tests-mainnet
          network: mainnet
          requires:
            - job-prepare
      - job-prod-tests:
          name: job-prod-tests-rinkeby
          network: rinkeby
          requires:
            - job-prepare
      - job-prod-tests:
          name: job-prod-tests-kovan
          network: kovan
          requires:
            - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Differential local production tests
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-diff-prod-tests-local:
          name: job-diff-prod-tests-local
          requires:
            - job-prepare
      - job-diff-prod-tests-local-ovm:
          name: job-diff-prod-tests-local-ovm
          requires:
            - job-prepare
  workflow-staging:
    jobs:
      - job-prepare:
          filters:
            branches:
              only: /.*(staging|master).*/
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Packaging
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-pack-browser:
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Deployment validation
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-validate-deployments:
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Production tests
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-prod-tests:
          name: job-prod-tests-mainnet
          network: mainnet
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      - job-prod-tests:
          name: job-prod-tests-rinkeby
          network: rinkeby
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      - job-prod-tests:
          name: job-prod-tests-kovan
          network: kovan
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Differential local production tests
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-diff-prod-tests-local:
          name: job-diff-prod-tests-local
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      - job-diff-prod-tests-local-ovm:
          name: job-diff-prod-tests-local-ovm
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Differential production tests
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - job-diff-prod-tests:
          name: job-diff-prod-tests-mainnet
          network: mainnet
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      - job-diff-prod-tests:
          name: job-diff-prod-tests-rinkeby
          network: rinkeby
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
      - job-diff-prod-tests:
          name: job-diff-prod-tests-kovan
          network: kovan
          filters:
            branches:
              only: /.*(staging|master).*/
          requires:
            - job-prepare
